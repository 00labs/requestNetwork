version: 2

references:
  working_directory: &working_directory
    ~/repo
  attach_workspace: &attach_workspace
  node_image: &node_image
    image: circleci/node:8
  ipfs_image: &ipfs_image
    image: ipfs/go-ipfs
  ganache_image: &ganache_image
    image: trufflesuite/ganache-cli
    command:
      - "-l"
      - "90000000"
      - "-m"
      - "candy maple cake sugar pudding cream honey rich smooth crumble sweet treat"

jobs:
  build:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - checkout
      - run:
          name: 'Install lerna'
          command: 'sudo npm install -g lerna'
      - run:
          name: 'Bootstrap'
          command: 'lerna bootstrap --concurrency=1'
      - persist_to_workspace:
          root: *working_directory
          paths: .
  test-data-access:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Install lerna'
          command: 'sudo npm install -g lerna'
      - run:
          name: 'Build data-access'
          command: 'lerna run --scope @requestnetwork/data-access build --stream'
      - run:
          name: 'Lint data-access'
          command: 'lerna run --scope @requestnetwork/data-access lint --stream'
      - run:
          name: 'Test data-access'
          command: 'lerna run --scope @requestnetwork/data-access test --stream'
  test-ethereum-storage:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Install lerna'
          command: 'sudo npm install -g lerna'
      - run:
          name: 'Build ethereum-storage'
          command: 'lerna run --scope @requestnetwork/ethereum-storage build --stream'
      - run:
          name: 'Lint ethereum-storage'
          command: 'lerna run --scope @requestnetwork/ethereum-storage lint --stream'
      - run:
          name: 'Test ethereum-storage'
          command: 'lerna run --scope @requestnetwork/ethereum-storage test --stream'
  test-request-logic:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Install lerna'
          command: 'sudo npm install -g lerna'
      - run:
          name: 'Build request-logic'
          command: 'lerna run --scope @requestnetwork/request-logic build --stream'
      - run:
          name: 'Lint request-logic'
          command: 'lerna run --scope @requestnetwork/request-logic lint --stream'
      - run:
          name: 'Test request-logic'
          command: 'lerna run --scope @requestnetwork/request-logic test --stream'
  test-types:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Install lerna'
          command: 'sudo npm install -g lerna'
      - run:
          name: 'Build types'
          command: 'lerna run --scope @requestnetwork/types build --stream'
      - run:
          name: 'Lint types'
          command: 'lerna run --scope @requestnetwork/types lint --stream'
  test-requestNetwork.js:
    docker:
      - *node_image
      - *ipfs_image
      - *ganache_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Install lerna'
          command: 'sudo npm install -g lerna'
      - run:
          name: 'Deploy test contract'
          command: 'lerna run --scope @requestnetwork/request-network.js testdeploy'
      - run:
          name: 'Test requestNetwork.js library'
          command: 'lerna run --scope @requestnetwork/request-network.js test --stream'
  test-requestNetworkSmartContracts:
    docker:
      - *node_image
      - *ipfs_image
      - *ganache_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Install lerna and solium'
          command: 'sudo npm install -g lerna solium@1.1.8'
      - run:
          name: 'Check contract linting'
          command: 'lerna run --scope request-network-smart-contracts lint'
      - run:
          name: 'Test requestNetwork contract'
          command: 'lerna run --scope request-network-smart-contracts test'
  build-docs-requestNetwork.js:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Install lerna and compodoc'
          command: 'sudo npm install -g lerna @compodoc/compodoc'
      - run:
          name: 'Create library documentation'
          command: 'lerna run --scope @requestnetwork/request-network.js docs'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/requestNetwork.js/docs
  build-docs-requestNetworkSmartContracts:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Install lerna'
          command: 'sudo npm install -g lerna'
      - run:
          name: 'Create contract documentation'
          command: 'lerna run --scope request-network-smart-contracts docs:build'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/requestNetworkSmartContracts/docs
  deploy-docs:
    docker:
      - image: circleci/python:2.7-jessie
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Install awscli'
          command: 'sudo pip install awscli'
      - run:
          name: Deploy library documentation to S3
          command: 'aws s3 sync packages/requestNetwork.js/docs s3://docs-js-lib.request.network --delete'
      - run:
          name: Deploy contracts documentation to S3
          command: 'aws s3 sync packages/requestNetworkSmartContracts/docs s3://docs-smart-contracts.request.network --delete'

workflows:
  version: 2
  build-and-test:
    jobs:
      - build
      # Test
      - test-data-access:
          requires:
            - build
      - test-ethereum-storage:
          requires:
            - build
      - test-request-logic:
          requires:
            - build
      - test-types:
          requires:
            - build
      - test-requestNetwork.js:
          requires:
            - build
      - test-requestNetworkSmartContracts:
          requires:
            - build
      # Build documentation
      - build-docs-requestNetwork.js:
          requires:
            - test-requestNetwork.js
      - build-docs-requestNetworkSmartContracts:
          requires:
            - test-requestNetworkSmartContracts
      # Deploy documentation
      - deploy-docs:
          filters:
            branches:
              only: master
          requires:
            - build-docs-requestNetwork.js
            - build-docs-requestNetworkSmartContracts
