version: 2

references:
    working_directory: &working_directory ~/repo
    attach_workspace: &attach_workspace
    node_image: &node_image
        image: circleci/node:8
    ipfs_image: &ipfs_image
        image: ipfs/go-ipfs
    ganache_image: &ganache_image
        image: trufflesuite/ganache-cli:v6.1.3
        command:
            - "-l"
            - "90000000"
            - "-m"
            - "candy maple cake sugar pudding cream honey rich smooth crumble sweet treat"

jobs:
    build:
        docker:
            - *node_image
        working_directory: *working_directory
        steps:
            - checkout
            - run:
                  name: "Yarn install"
                  command: "yarn install"
            - persist_to_workspace:
                  root: *working_directory
                  paths: .
    lint-package-json:
        docker:
            - *node_image
        working_directory: *working_directory
        steps:
            - attach_workspace:
                  at: *working_directory
            - run:
                  name: "lint package.json files"
                  command: "yarn run packageJsonLint"
    test-client-side:
        docker:
            - *node_image
        working_directory: *working_directory
        steps:
            - attach_workspace:
                  at: *working_directory
            - run:
                  name: "Build client-side"
                  command: "yarn workspace @requestnetwork/client-side run build:commonjs"
            - run:
                  name: "Lint client-side"
                  command: "yarn workspace @requestnetwork/client-side run lint "
            - run:
                  name: "Test client-side"
                  command: "yarn workspace @requestnetwork/client-side run test"
            - persist_to_workspace:
                  root: *working_directory
                  paths:
                      - packages/client-side/.nyc_output
    test-data-access:
        docker:
            - *node_image
        working_directory: *working_directory
        steps:
            - attach_workspace:
                  at: *working_directory
            - run:
                  name: "Build data-access"
                  command: "yarn workspace @requestnetwork/data-access run build"
            - run:
                  name: "Lint data-access"
                  command: "yarn workspace @requestnetwork/data-access run lint "
            - run:
                  name: "Test data-access"
                  command: "yarn workspace @requestnetwork/data-access run test"
            - persist_to_workspace:
                  root: *working_directory
                  paths:
                      - packages/data-access/.nyc_output
    test-transaction-manager:
        docker:
            - *node_image
        working_directory: *working_directory
        steps:
            - attach_workspace:
                  at: *working_directory
            - run:
                  name: "Build transaction-manager"
                  command: "yarn workspace @requestnetwork/transaction-manager run build"
            - run:
                  name: "Lint transaction-manager"
                  command: "yarn workspace @requestnetwork/transaction-manager run lint"
            - run:
                  name: "Test transaction-manager"
                  command: "yarn workspace @requestnetwork/transaction-manager run test"
            - persist_to_workspace:
                  root: *working_directory
                  paths:
                      - packages/transaction-manager/.nyc_output
    test-ethereum-storage:
        docker:
            - *node_image
            - *ipfs_image
            - *ganache_image
        working_directory: *working_directory
        steps:
            - attach_workspace:
                  at: *working_directory
            - run:
                  name: "Build ethereum-storage"
                  command: "yarn workspace @requestnetwork/ethereum-storage run build:lib"
            - run:
                  name: "Lint ethereum-storage"
                  command: "yarn workspace @requestnetwork/ethereum-storage run lint:lib"
            - run:
                  name: "Deploy contracs ethereum-storage"
                  command: "yarn workspace @requestnetwork/ethereum-storage run deploy"
            - run:
                  name: "Test ethereum-storage"
                  command: "yarn workspace @requestnetwork/ethereum-storage run test:lib"
            - run:
                  name: "Build smart contracts ethereum-storage"
                  command: "yarn workspace @requestnetwork/ethereum-storage run build:sol"
            - run:
                  name: "Lint smart contracts ethereum-storage"
                  command: "yarn workspace @requestnetwork/ethereum-storage run lint:sol"
            - run:
                  name: "Test smart contracts ethereum-storage"
                  command: "yarn workspace @requestnetwork/ethereum-storage run test:sol"
            - persist_to_workspace:
                  root: *working_directory
                  paths:
                      - packages/ethereum-storage/.nyc_output
    test-request-logic:
        docker:
            - *node_image
        working_directory: *working_directory
        steps:
            - attach_workspace:
                  at: *working_directory
            - run:
                  name: "Build request-logic"
                  command: "yarn workspace @requestnetwork/request-logic run build"
            - run:
                  name: "Lint request-logic"
                  command: "yarn workspace @requestnetwork/request-logic run lint"
            - run:
                  name: "Test request-logic"
                  command: "yarn workspace @requestnetwork/request-logic run test"
            - persist_to_workspace:
                  root: *working_directory
                  paths:
                      - packages/request-logic/.nyc_output
    test-request-node:
        docker:
            - *node_image
        working_directory: *working_directory
        steps:
            - attach_workspace:
                  at: *working_directory
            - run:
                  name: "Build request-node"
                  command: "yarn workspace @requestnetwork/request-node run build"
            - run:
                  name: "Lint request-node"
                  command: "yarn workspace @requestnetwork/request-node run lint"
            - run:
                  name: "Test request-node"
                  command: "yarn workspace @requestnetwork/request-node run test"
            - persist_to_workspace:
                  root: *working_directory
                  paths:
                      - packages/request-node/.nyc_output
    test-types:
        docker:
            - *node_image
        working_directory: *working_directory
        steps:
            - attach_workspace:
                  at: *working_directory
            - run:
                  name: "Build types"
                  command: "yarn workspace @requestnetwork/types run build"
            - run:
                  name: "Lint types"
                  command: "yarn workspace @requestnetwork/types run lint"
    test-utils:
        docker:
            - *node_image
        working_directory: *working_directory
        steps:
            - attach_workspace:
                  at: *working_directory
            - run:
                  name: "Build utils"
                  command: "yarn workspace @requestnetwork/utils run build"
            - run:
                  name: "Lint utils"
                  command: "yarn workspace @requestnetwork/utils run lint"
            - run:
                  name: "Test utils"
                  command: "yarn workspace @requestnetwork/utils run test"
            - persist_to_workspace:
                  root: *working_directory
                  paths:
                      - packages/utils/.nyc_output

    test-ethereum-private-key-signature-provider:
        docker:
            - *node_image
        working_directory: *working_directory
        steps:
            - attach_workspace:
                  at: *working_directory
            - run:
                  name: "Build ethereum-private-key-signature-provider"
                  command: "yarn workspace @requestnetwork/ethereum-private-key-signature-provider run build"
            - run:
                  name: "Lint ethereum-private-key-signature-provider"
                  command: "yarn workspace @requestnetwork/ethereum-private-key-signature-provider run lint"
            - run:
                  name: "Test ethereum-private-key-signature-provider"
                  command: "yarn workspace @requestnetwork/ethereum-private-key-signature-provider run test"
            - persist_to_workspace:
                  root: *working_directory
                  paths:
                      - packages/ethereum-private-key-signature-provider/.nyc_output

    test-integration-test:
        docker:
            - *node_image
            - *ipfs_image
            - *ganache_image
        working_directory: *working_directory
        steps:
            - attach_workspace:
                  at: *working_directory
            - run:
                  name: "Build integration-test"
                  command: "yarn workspace @requestnetwork/integration-test run build"
            - run:
                  name: "Lint integration-test"
                  command: "yarn workspace @requestnetwork/integration-test run lint"
            - run:
                  name: "Deploy test contract from ethereum-storage"
                  command: "yarn workspace @requestnetwork/ethereum-storage run deploy"
            - run:
                  name: "Test integration-test"
                  command: "yarn workspace @requestnetwork/integration-test run test"
    test-requestNetwork.js:
        docker:
            - *node_image
            - *ipfs_image
            - *ganache_image
        working_directory: *working_directory
        steps:
            - attach_workspace:
                  at: *working_directory
            - run:
                  name: "Deploy test contract"
                  command: "yarn workspace @requestnetwork/request-network.js run testdeploy"
            - run:
                  name: "Test request-network.js library"
                  command: "yarn workspace @requestnetwork/request-network.js run test"
    test-requestNetworkSmartContracts:
        docker:
            - *node_image
            - *ipfs_image
            - *ganache_image
        working_directory: *working_directory
        steps:
            - attach_workspace:
                  at: *working_directory
            - run:
                  name: "Install solium"
                  command: "yarn global add solium@1.1.8"
            - run:
                  name: "Check contract linting"
                  command: "yarn workspace request-network-smart-contracts run lint"
            - run:
                  name: "Test requestNetwork contract"
                  command: "yarn workspace request-network-smart-contracts run test"
    build-docs-requestNetwork.js:
        docker:
            - *node_image
        working_directory: *working_directory
        steps:
            - attach_workspace:
                  at: *working_directory
            - run:
                  name: "Install compodoc"
                  command: "yarn global add @compodoc/compodoc"
            - run:
                  name: "Create library documentation"
                  command: "yarn workspace @requestnetwork/request-network.js run docs"
            - persist_to_workspace:
                  root: *working_directory
                  paths:
                      - packages/requestNetwork.js/docs
    build-docs-requestNetworkSmartContracts:
        docker:
            - *node_image
        working_directory: *working_directory
        steps:
            - attach_workspace:
                  at: *working_directory
            - run:
                  name: "Create contract documentation"
                  command: "yarn workspace request-network-smart-contracts run docs:build"
            - persist_to_workspace:
                  root: *working_directory
                  paths:
                      - packages/requestNetworkSmartContracts/docs
    deploy-docs:
        docker:
            - image: circleci/python:2.7-jessie
        working_directory: *working_directory
        steps:
            - attach_workspace:
                  at: *working_directory
            - run:
                  name: "Install awscli"
                  command: "sudo pip install awscli"
            - run:
                  name: Deploy library documentation to S3
                  command: "aws s3 sync packages/requestNetwork.js/docs s3://docs-js-lib.request.network --delete"
            - run:
                  name: Deploy contracts documentation to S3
                  command: "aws s3 sync packages/requestNetworkSmartContracts/docs s3://docs-smart-contracts.request.network --delete"
    publish-coverage:
        docker:
            - *node_image
        working_directory: *working_directory
        steps:
            - attach_workspace:
                  at: *working_directory
            - run:
                  name: "Coverage data-access"
                  command: "yarn workspace @requestnetwork/data-access run coverage"
            - run:
                  name: "Coverage ethereum-storage"
                  command: "yarn workspace @requestnetwork/ethereum-storage run coverage"
            - run:
                  name: "Coverage request-logic"
                  command: "yarn workspace @requestnetwork/request-logic run coverage"
            - run:
                  name: "Coverage ethereum-private-key-signature-provider"
                  command: "yarn workspace @requestnetwork/ethereum-private-key-signature-provider run coverage"
            - run:
                  name: "Coverage request-node"
                  command: "yarn workspace @requestnetwork/request-node run coverage"
            - run:
                  name: "Coverage utils"
                  command: "yarn workspace @requestnetwork/utils run coverage"
            - run:
                  name: "Publish Coverage"
                  command: "yarn publish-coverage"
workflows:
    version: 2
    build-and-test:
        jobs:
            - build
            - lint-package-json:
                  requires:
                      - build
            # Test
            - test-client-side:
                  requires:
                      - build
            - test-transaction-manager:
                  requires:
                      - build
            - test-data-access:
                  requires:
                      - build
            - test-ethereum-storage:
                  requires:
                      - build
            - test-request-logic:
                  requires:
                      - build
            - test-request-node:
                  requires:
                      - build
            - test-types:
                  requires:
                      - build
            - test-utils:
                  requires:
                      - build
            - test-ethereum-private-key-signature-provider:
                  requires:
                      - build
            - test-integration-test:
                  requires:
                      - build
            - test-requestNetwork.js:
                  requires:
                      - build
            - test-requestNetworkSmartContracts:
                  requires:
                      - build
            # Publish the code coverage
            - publish-coverage:
                  requires:
                      - test-client-side
                      - test-data-access
                      - test-transaction-manager
                      - test-ethereum-storage
                      - test-request-logic
                      - test-ethereum-private-key-signature-provider
                      - test-request-node
                      - test-requestNetwork.js
                      - test-utils
                      - test-ethereum-private-key-signature-provider
            # Build documentation
            - build-docs-requestNetwork.js:
                  requires:
                      - test-requestNetwork.js
            - build-docs-requestNetworkSmartContracts:
                  requires:
                      - test-requestNetworkSmartContracts
            # Deploy documentation
            - deploy-docs:
                  filters:
                      branches:
                          only: master
                  requires:
                      - build-docs-requestNetwork.js
                      - build-docs-requestNetworkSmartContracts
