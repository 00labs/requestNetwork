version: 2.1

references:
  working_directory: &working_directory ~/repo
  attach_workspace: &attach_workspace
  image_name: &image_name "circleci/python:3.7"
  node_image: &node_image
    image: circleci/node:10
  ipfs_image: &ipfs_image
    image: ipfs/go-ipfs
  ganache_image: &ganache_image
    image: trufflesuite/ganache-cli:v6.3.0
    command:
      - '-l'
      - '90000000'
      - '-m'
      - 'candy maple cake sugar pudding cream honey rich smooth crumble sweet treat'

orbs:
  aws-cli: circleci/aws-cli@0.1.4
  aws-ecr: circleci/aws-ecr@4.0.1

jobs:
  build:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - checkout
      - run:
          name: 'Yarn install'
          command: 'yarn install'
      - persist_to_workspace:
          root: *working_directory
          paths: .
  lint-package-json:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'lint package.json files'
          command: 'yarn run packageJsonLint'
  test-request-client:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build request-client.js'
          command: 'yarn workspace @requestnetwork/request-client.js run build:commonjs'
      - run:
          name: 'Lint request-client.js'
          command: 'yarn workspace @requestnetwork/request-client.js run lint '
      - run:
          name: 'Test request-client.js'
          command: 'yarn workspace @requestnetwork/request-client.js run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/request-client.js/coverage/
  test-data-access:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build data-access'
          command: 'yarn workspace @requestnetwork/data-access run build'
      - run:
          name: 'Lint data-access'
          command: 'yarn workspace @requestnetwork/data-access run lint '
      - run:
          name: 'Test data-access'
          command: 'yarn workspace @requestnetwork/data-access run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/data-access/coverage/
  test-data-format:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build data-format'
          command: 'yarn workspace @requestnetwork/data-format run build'
      - run:
          name: 'Lint data-format'
          command: 'yarn workspace @requestnetwork/data-format run lint'
      - run:
          name: 'Test data-format'
          command: 'yarn workspace @requestnetwork/data-format run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/data-format/coverage/
  test-transaction-manager:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build transaction-manager'
          command: 'yarn workspace @requestnetwork/transaction-manager run build'
      - run:
          name: 'Lint transaction-manager'
          command: 'yarn workspace @requestnetwork/transaction-manager run lint'
      - run:
          name: 'Test transaction-manager'
          command: 'yarn workspace @requestnetwork/transaction-manager run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/transaction-manager/coverage/
  test-ethereum-storage:
    docker:
      - *node_image
      - *ipfs_image
      - *ganache_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build ethereum-storage'
          command: 'yarn workspace @requestnetwork/ethereum-storage run build:lib'
      - run:
          name: 'Lint ethereum-storage'
          command: 'yarn workspace @requestnetwork/ethereum-storage run lint:lib'
      - run:
          name: 'Deploy contracs ethereum-storage'
          command: 'yarn workspace @requestnetwork/ethereum-storage run deploy'
      - run:
          name: 'Test ethereum-storage'
          command: 'yarn workspace @requestnetwork/ethereum-storage run test:lib'
      - run:
          name: 'Build smart contracts ethereum-storage'
          command: 'yarn workspace @requestnetwork/ethereum-storage run build:sol'
      - run:
          name: 'Lint smart contracts ethereum-storage'
          command: 'yarn workspace @requestnetwork/ethereum-storage run lint:sol'
      - run:
          name: 'Test smart contracts ethereum-storage'
          command: 'yarn workspace @requestnetwork/ethereum-storage run test:sol'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/ethereum-storage/coverage/
  test-request-logic:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build request-logic'
          command: 'yarn workspace @requestnetwork/request-logic run build'
      - run:
          name: 'Lint request-logic'
          command: 'yarn workspace @requestnetwork/request-logic run lint'
      - run:
          name: 'Test request-logic'
          command: 'yarn workspace @requestnetwork/request-logic run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/request-logic/coverage/
  test-advanced-logic:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build advanced-logic'
          command: 'yarn workspace @requestnetwork/advanced-logic run build'
      - run:
          name: 'Lint advanced-logic'
          command: 'yarn workspace @requestnetwork/advanced-logic run lint'
      - run:
          name: 'Test advanced-logic'
          command: 'yarn workspace @requestnetwork/advanced-logic run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/advanced-logic/coverage/
  test-request-node:
    docker:
      - *node_image
      - *ipfs_image
      - *ganache_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build request-node'
          command: 'yarn workspace @requestnetwork/request-node run build'
      - run:
          name: 'Lint request-node'
          command: 'yarn workspace @requestnetwork/request-node run lint'
      - run:
          name: 'Deploy test contract from ethereum-storage'
          command: 'yarn workspace @requestnetwork/ethereum-storage run deploy'
      - run:
          name: 'Test request-node'
          command: 'yarn workspace @requestnetwork/request-node run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/request-node/coverage/
  test-types:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build types'
          command: 'yarn workspace @requestnetwork/types run build'
      - run:
          name: 'Lint types'
          command: 'yarn workspace @requestnetwork/types run lint'
  test-utils:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build utils'
          command: 'yarn workspace @requestnetwork/utils run build'
      - run:
          name: 'Lint utils'
          command: 'yarn workspace @requestnetwork/utils run lint'
      - run:
          name: 'Test utils'
          command: 'yarn workspace @requestnetwork/utils run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/utils/coverage/
  test-epk-signature:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build epk-signature'
          command: 'yarn workspace @requestnetwork/epk-signature run build'
      - run:
          name: 'Lint epk-signature'
          command: 'yarn workspace @requestnetwork/epk-signature run lint'
      - run:
          name: 'Test epk-signature'
          command: 'yarn workspace @requestnetwork/epk-signature run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/epk-signature/coverage/
  test-integration-test:
    docker:
      - *node_image
      - *ipfs_image
      - *ganache_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build integration-test'
          command: 'yarn workspace @requestnetwork/integration-test run build'
      - run:
          name: 'Lint integration-test'
          command: 'yarn workspace @requestnetwork/integration-test run lint'
      - run:
          name: 'Deploy test contract from ethereum-storage'
          command: 'yarn workspace @requestnetwork/ethereum-storage run deploy'
      - run:
          name: 'Start request-node'
          command: 'yarn workspace @requestnetwork/request-node run start'
          background: true
      - run: sleep 3
      - run:
          name: 'Test integration-test'
          command: 'yarn workspace @requestnetwork/integration-test run test'
  test-usage-examples:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build usage-examples'
          command: 'yarn workspace @requestnetwork/usage-examples run build'
      - run:
          name: 'Lint usage-examples'
          command: 'yarn workspace @requestnetwork/usage-examples run lint'
      - run:
          name: 'Execute usage-examples'
          command: 'yarn workspace @requestnetwork/usage-examples run start'
  publish-coverage:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Publish Coverage'
          command: 'yarn publish-coverage'
  publish-prerelease:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Login to NPM registry'
          command: |
            npm set registry http://npm.request.network
            echo "//npm.request.network/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      - run:
          name: Publish packages
          command: yarn publish-prerelease --registry http://npm.request.network
  push-request-network-image:
    docker:
      - image: *image_name
    working_directory: *working_directory
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Build"
          command: docker build -f Dockerfile -t request-network .
      - aws-cli/install
      - aws-cli/configure
      - aws-ecr/ecr-login
      - run:
          name: "Push"
          command: |
            export SHORT_SHA1=$(echo $CIRCLE_SHA1 | cut -c -7)
            docker tag request-network 519161485873.dkr.ecr.eu-west-1.amazonaws.com/request-network:${SHORT_SHA1}
            docker tag request-network 519161485873.dkr.ecr.eu-west-1.amazonaws.com/request-network:${CIRCLE_BRANCH}
            docker push 519161485873.dkr.ecr.eu-west-1.amazonaws.com/request-network:${SHORT_SHA1}
            docker push 519161485873.dkr.ecr.eu-west-1.amazonaws.com/request-network:${CIRCLE_BRANCH}

workflows:
  version: 2
  push-request-network-image:
    jobs:
      - push-request-network-image
  build-and-test:
    jobs:
      - build
      - lint-package-json:
          requires:
            - build
      # Test
      - test-request-client:
          requires:
            - build
      - test-transaction-manager:
          requires:
            - build
      - test-data-access:
          requires:
            - build
      - test-data-format:
          requires:
            - build
      - test-ethereum-storage:
          requires:
            - build
      - test-request-logic:
          requires:
            - build
      - test-advanced-logic:
          requires:
            - build
      - test-request-node:
          requires:
            - build
      - test-types:
          requires:
            - build
      - test-utils:
          requires:
            - build
      - test-epk-signature:
          requires:
            - build
      - test-usage-examples:
          requires:
            - build
      - test-integration-test:
          requires:
            - build
      # Publish the code coverage
      - publish-coverage:
          requires:
            - test-request-client
            - test-data-access
            - test-data-format
            - test-transaction-manager
            - test-ethereum-storage
            - test-request-logic
            - test-advanced-logic
            - test-epk-signature
            - test-request-node
            - test-utils
      - publish-prerelease:
          requires:
            - test-request-client
            - test-data-access
            - test-data-format
            - test-transaction-manager
            - test-ethereum-storage
            - test-request-logic
            - test-advanced-logic
            - test-epk-signature
            - test-request-node
            - test-utils
          filters:
            branches:
              only:
                - development
